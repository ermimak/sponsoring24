---
description: 
globs: 
alwaysApply: false
---
# Project Structure Guide

This project is a fullstack fundraising platform with a Laravel backend and a Vue 3 SPA frontend. The main structure is as follows:

### üîÑ Project Awareness & Context
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before starting a new task. If the task isn‚Äôt listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

### üß± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### üß™ Testing & Reliability
- **Always create unit tests for new features** (functions, classes, routes, etc).
- **After updating any logic**, check whether existing unit tests need to be updated. If so, do it.
- **Tests should live in a `/tests` folder** mirroring the main app structure.
  - Include at least:
    - 1 test for expected use
    - 1 edge case
    - 1 failure case

### ‚úÖ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a ‚ÄúDiscovered During Work‚Äù section.

### üìé Style & Conventions
- **Use PHP** as the primary language.
- **Follow PSR-12**, use type hints, and Use PHP CS Fixer to enforce coding standards..
- **Use `GDPR`**,Encrypt sensitive data and comply with data protection laws..


### üìö Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.

### üß† AI Behavior Rules
- **Never assume missing context. Ask questions if uncertain.**
- **Never hallucinate libraries or functions** ‚Äì only use known, verified packages.
- **Always confirm file paths and module names** exist before referencing them in code or tests.
- **Never delete or overwrite existing code** unless explicitly instructed to or if part of a task from `TASK.md`.

- **Frontend (Vue 3 + Vite + Tailwind CSS):**
  - Main entry: [resources/js/app.js](mdc:resources/js/app.js)
  - Main layout: [resources/js/Layouts/MainLayout.vue](mdc:resources/js/Layouts/MainLayout.vue)
  - Auth layout: [resources/js/Layouts/AuthLayout.vue](mdc:resources/js/Layouts/AuthLayout.vue)
  - Dashboard layout: [resources/js/Layouts/DashboardLayout.vue](mdc:resources/js/Layouts/DashboardLayout.vue)
  - Welcome page: [resources/js/Pages/Welcome.vue](mdc:resources/js/Pages/Welcome.vue)
  - Projects listing: [resources/js/Pages/Projects/Index.vue](mdc:resources/js/Pages/Projects/Index.vue)
  - Dashboard index: [resources/js/Pages/Dashboard/Index.vue](mdc:resources/js/Pages/Dashboard/Index.vue)
  - Auth pages: [resources/js/Pages/Auth/Login.vue](mdc:resources/js/Pages/Auth/Login.vue), [resources/js/Pages/Auth/Register.vue](mdc:resources/js/Pages/Auth/Register.vue)
  - Project card component: [resources/js/Components/ProjectCard.vue](mdc:resources/js/Components/ProjectCard.vue)

- **Backend (Laravel 12):**
  - Web routes: [routes/web.php](mdc:routes/web.php)
  - Planning and architecture: [PLANNING.md](mdc:PLANNING.md)

- **Styling and Build:**
  - Tailwind config: [tailwind.config.js](mdc:tailwind.config.js)
  - Vite config: [vite.config.js](mdc:vite.config.js)
  - PostCSS config: [postcss.config.js](mdc:postcss.config.js)
  - Main CSS: [resources/css/app.css](mdc:resources/css/app.css)

- **Dockerized Environment:**
  - Dockerfile: [Dockerfile](mdc:Dockerfile)

Refer to [PLANNING.md](mdc:PLANNING.md) for the full project roadmap, milestones, and feature breakdown.

