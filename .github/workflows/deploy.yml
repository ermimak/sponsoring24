name: Deploy

on:
  workflow_run:
    # Trigger this workflow when the 'CI' workflow completes
    workflows: ["CI"]
    types:
      - completed
    # Only run for pushes to main or develop branches in the CI workflow
    branches:
      - main
      - develop

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    # Only proceed if the CI workflow was successful and it was on the 'main' branch
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' }}
    
    # Add permissions for the GITHUB_TOKEN to allow downloading artifacts
    permissions:
      contents: read # Required to checkout code and potentially access repository content
      actions: read  # Required to read workflow run metadata and download artifacts

    steps:
    - uses: actions/checkout@v4

    - name: Debug Workflow Run
      run: |
        echo "Workflow Run ID: ${{ github.event.workflow_run.id }}"
        echo "Workflow Run Conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "Workflow Run Head Branch: ${{ github.event.workflow_run.head_branch }}"
        echo "Repository: ${{ github.repository }}"
        echo "Artifacts URL: https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts"

    - name: Download Build Artifacts
      id: download-artifacts
      uses: actions/download-artifact@v4
      with:
        # The name of the artifact to download. This must match the name used in the upload-artifact step in CI.
        name: build-artifacts
        # The path where the artifact will be downloaded.
        path: build-artifacts
        # The run ID of the workflow that produced the artifact. This is crucial for cross-workflow artifact fetching.
        run-id: ${{ github.event.workflow_run.id }}
        # Provide the SPONSORING24 secret for authentication to download artifacts from another workflow run.
        # This has been updated from secrets.GITHUB_TOKEN to secrets.SPONSORING24 based on your provided secrets.
        github-token: ${{ secrets.SPONSORING24 }}
      # Do not continue if artifact download fails.
      continue-on-error: false

    - name: Debug Artifact Download
      # Only run this step if the artifact download was successful
      if: steps.download-artifacts.outcome == 'success'
      run: |
        echo "Artifact download status: ${{ steps.download-artifacts.outcome }}"
        echo "Current directory: $(pwd)"
        echo "Listing build-artifacts directory:"
        ls -la build-artifacts || echo "build-artifacts directory not found"
        echo "Listing build-artifacts/build directory:"
        ls -la build-artifacts/build || echo "build directory not found"
        echo "Listing build-artifacts/vendor directory:"
        ls -la build-artifacts/vendor || echo "vendor directory not found"

    - name: Verify Artifact Contents
      # Only run this step if the artifact download was successful
      if: steps.download-artifacts.outcome == 'success'
      run: |
        if [ ! -d "build-artifacts" ]; then
          echo "Error: build-artifacts directory not found"
          exit 1
        fi
        if [ ! -d "build-artifacts/build" ]; then
          echo "Error: build directory not found in artifacts"
          exit 1
        fi
        if [ ! -d "build-artifacts/vendor" ]; then
          echo "Error: vendor directory not found in artifacts"
          exit 1
        fi
        echo "Artifact contents verified successfully"

    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set -e
          cd /var/www/sponsoring24
          # Pull the latest code (optional, as artifacts are used for build, but good for config/db changes)
          git pull origin main
          # Ensure target directories exist
          mkdir -p public/build
          # Copy the built assets and vendor files from the downloaded artifacts
          cp -r build-artifacts/build/* public/build/
          cp -r build-artifacts/vendor/* vendor/
          # Clear and cache Laravel configurations
          php artisan optimize
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          # Restart PHP-FPM and Nginx to apply changes
          sudo systemctl restart php8.3-fpm
          sudo systemctl restart nginx
